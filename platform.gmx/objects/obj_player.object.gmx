<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>anim_playerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>spv = 0;
sph = 0;
grv = 1;
grounded = false;
xpos = x
ypos = y
canJump = false
jumping = false
playerSpeed = 1;
playerBrake = 2;
playerFriction = 1;
jumpForce = 13; //determines the max jump height, if you want to change the min hight increase jumpTapAdjust
jumpTapAdjust = 3; //the higher the number the more the jump is shortened by letting off the spacebar early
dashTimer = 0;
airMoves = 2; //the number of times you can exicute a move in the air
justDashed = false;

//health value. set to one for that classic player expiriance
globalvar playerHealth;
playerHealth = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//get player imput from keyboard &amp; mouse
keyLeft = keyboard_check_direct(ord("a"))  or keyboard_check_direct(ord("A"))
keyRight = keyboard_check_direct(ord("d")) or keyboard_check_direct(ord("D"))
keyJump = keyboard_check_direct(vk_space)
keyJumpRelease = keyboard_check_released(vk_space)
key_shoot = mouse_check_button_pressed(mb_left)


//health code. checks if you are dead, important that this comes before movement becase otherwise you will die and respawn inside the thing killing you
if (global.playerHealth &lt;= 0){
    scr_respawn();
}


//determine if the player can jump by determining if they are on the ground or not
if (place_meeting(x,y+1,par_wall))
    {
    airMoves = 2;
    xpos = x;
    ypos = y;
    } 
/*
else
    {
    canJump= false;
    }
*/    

 
    //get movement left
if canTurn{
    if keyLeft
    {
        sprite_index = anim_playerRun;
        //if the player is already moving left: accelerate left normaly
        if (sph &gt; -10) &amp;&amp; (sph &lt; 0)
        {
            sph -= playerSpeed;
            image_xscale = -1;
        }
    //if the player is moving right, slow the player faster, to act as a break
            //this alows the player to break by pressing in the opposite direction, rewarding skilled players
        if (sph &gt; -10) &amp;&amp; (sph &gt;= 0)
        {
            sph -= playerSpeed;
            image_xscale = -1;
        }    
    }
}
    

if canTurn{
//get movement right, same process as the left movement
    if keyRight
    {
        sprite_index = anim_playerRun
        if (sph &lt; 10) &amp;&amp; (sph &lt; 0)
        {
            sph += playerSpeed;
            image_xscale = 1;
        }
        if (sph &lt; 10) &amp;&amp; (sph &gt;= 0)
        {
            sph += playerSpeed;
            image_xscale = 1;
        }
    }
}
    
//determine if player is entering no movement, and if so break normally
if keyRight &amp;&amp; keyLeft or !keyRight &amp;&amp; !keyLeft
    {
    sprite_index = anim_playerIdle;
    if sph &gt; 0
        {
        sph -= playerFriction;
        }
    if sph &lt; 0
        {
        sph += playerFriction;
        }
    }
    
    
//move the player down
spv += grv

    

//get jumping imput from player and if the player is on the ground move them up
if keyJump = true
    {
    if (airMoves &gt;= 1)
        {
        airMoves -= 1;
        spv -= jumpForce;
        jumping = true;
        audio_play_sound(snd_sproing,8,false);
        }
    }

//reduce jump height if player releases space
    if keyboard_check_released(vk_space)
    {
    if spv &lt; 0
        {
        spv += jumpTapAdjust;
        }
    }

if jumping
    {
    sprite_index = anim_playerJump;
    }
    

//starts the dash function
if key_shoot{
    if airMoves &gt;= 1{
        dashTimer = 10;
    }
}

if (dashTimer &gt; 0){
    airMoves -= 1;
    spv = 0;
    sph = image_xscale * 20;
    dashTimer -= 1;
    canTurn = false;
    justDashed = true;
}

if (dashTimer &lt;= 0){
    if justDashed{
        sph = 10 * image_xscale; //10 is the max speed
        justDashed = false;
    }
    canTurn = true;
}
        
    
//collision with walls
    //v collision
if place_meeting(x,y+spv,par_wall)
    {
    while (!place_meeting(x,y+sign(spv),par_wall))
        {
        y+=sign(spv);
        }
    spv = 0;
    jumping = false;
    }
y += spv;

    
//horisontal collison
if place_meeting(x+sph,y,par_wall)
    {
    while (!place_meeting(x+sign(sph),y,par_wall))
        {
        x+=sign(sph);
        }
    sph = 0;
jumping = false;
    }
//move the player for the the values of the x and y movement
x += sph;


/*
if key_shoot
    {
    instance_create(x,y,obj_shot);
    }
*\
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>y</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>(room_height+20)</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>321</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_message</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>You Are Dead.  Watch out for Falls.</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.playerHealth</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="par_laser">
      <action>
        <libid>1</libid>
        <id>321</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_message</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>You Are Dead.  Watch out for Lasers.</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.playerHealth</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
