<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite22</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>playerLungeMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//Change these values to alter player movement
grv = 0.5;  //change to alter the rate of gravity
playerSpeed = 1; //changes the player speed in both directions
playerBrake = 2; //changes how much pressing the oposite direction of your movement brakes you. a value of 10 should stop the player instantly
playerFriction = 1; //changes the rate that a player loses momentum. a value of 10 should stop the player instantly
globalvar jumpForce; 
jumpForce = 13; //determines the max jump height, if you want to change the min hight increase jumpTapAdjust
jumpTapAdjust = 5; //the higher the number the more the jump is shortened by letting off the spacebar early
totalDash = 10; // this is the amount of time the dash lasts
dashSpeed = 20; // the speed of the player while in dash
playerMaxSpeed = 10; //this is the max speed a player can travel

// vulnerable state
globalvar inv;
inv = false; 

//health value. set to 1 for that classic player expiriance
globalvar playerHealth;
playerHealth = 10;

globalvar playerMaxHealth;
playerMaxHealth = 10;

//number of moves the player can use initially(without getting any kills)
globalvar airMoves;
airMoves = 2;

globalvar maxAirMoves;
maxAirMoves = 10;


//do not change these initial values
spv = 0;
sph = 0;
grounded = false; 
xpos = x
ypos = y
canJump = false
jumping = false
canTurn = true;
justDashed = false;
dashTimer = 0;
canDash = true;
canGrav = true;
spvH = 0;
sphH = 0;
hZero = 1;
vZero = 1;

//playerstate "attacking var"
globalvar playerAttacking;
playerAttacking = false;

globalvar invul;
invul =false;

globalvar invulTimer;
invulTimer = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>visible = true;
inv = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>308</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_timeline_stop</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//get player imput from keyboard &amp; mouse
keyLeft = keyboard_check(vk_left) //keyboard_check_direct(ord("a"))  or keyboard_check_direct(ord("A"))
keyRight = keyboard_check(vk_right) //keyboard_check_direct(ord("d")) or keyboard_check_direct(ord("D"))
keyUp = keyboard_check(vk_up) //keyboard_check_direct(ord("w")) or keyboard_check_direct(ord("W"))
keyDown = keyboard_check(vk_down) //keyboard_check_direct(ord("s")) or keyboard_check_direct(ord("S"))
keyJumpP = keyboard_check_pressed(ord("x")) or keyboard_check_pressed(ord("X")) // keyboard_check_pressed(vk_space)
keyJumpD = keyboard_check_pressed(ord("x")) or keyboard_check_pressed(ord("X"))//keyboard_check_direct(vk_space)
keyJumpRelease = keyboard_check_released(ord("x")) or keyboard_check_released(ord("X"))//keyboard_check_released(vk_space)
key_shoot = keyboard_check_pressed(ord("z")) or keyboard_check_pressed(ord("Z")) //mouse_check_button_pressed(mb_left)
keyRestart = keyboard_check_pressed(ord("r")) or keyboard_check_pressed(ord("R"))
cameraMoveWeight = 10
cameraOffsetY = 50


// Restart Room
if keyRestart
{
    room_restart();
}

//health code. checks if you are dead, important that this comes before movement becase otherwise you will die and respawn inside the thing killing you
if (global.playerHealth &lt;= 0){
    scr_respawn();
}


//determine if the player can jump by determining if they are on the ground or not
if (place_meeting(x,y+1,par_wall))
    {
    airMoves = 2;
    xpos = x;
    ypos = y;
    } 

 
    //get movement left
if canTurn{
    if keyLeft
    {
        sprite_index = playerWalk;
        mask_index = playerWalk;
        //if the player is already moving left: accelerate left normaly
        if (sph &gt; -playerMaxSpeed) &amp;&amp; (sph &lt; 0)
        {
            sph -= playerSpeed;
            image_xscale = -1;
            //cameraBlock.x = x-100;
        }
        //if the player is moving right, slow the player faster, to act as a break
            //this alows the player to break by pressing in the opposite direction, rewarding skilled players
        if (sph &gt; -playerMaxSpeed) &amp;&amp; (sph &gt;= 0)
        {
            sph -= playerBrake;
            image_xscale = -1;
            //cameraBlock.x = x-100;
        }    
    }
}
    

if canTurn{
//get movement right, same process as the left movement
    if keyRight{
        sprite_index = playerWalk;
        mask_index = playerWalk;
        if (sph &lt; playerMaxSpeed) &amp;&amp; (sph &lt; 0)
        {
            sph += playerSpeed;
            image_xscale = 1;
            //cameraBlock.x = x+100;
        }
        if (sph &lt; playerMaxSpeed) &amp;&amp; (sph &gt;= 0)
        {
            sph += playerBrake;
            image_xscale = 1;
            //cameraBlock.x = x+100;
        }
    }
}
    
//determine if player is entering no movement, and if so break normally
if keyRight &amp;&amp; keyLeft or !keyRight &amp;&amp; !keyLeft{
    sprite_index = playerStand;
    mask_index = playerStand;
    if sph &gt; 0
        {
        sph -= playerFriction;
        }
    if sph &lt; 0
        {
        sph += playerFriction;
        }
    }

    
//move the player down
spv += grv
    

//get jumping imput from player and if the player is on the ground move them up
if keyJumpP = true
    {
    if ((airMoves &gt;= 1) &amp;&amp; (!playerAttacking))
        {
        airMoves -= 1;
        spv = -1 * jumpForce;
        jumping = true;
        audio_play_sound(snd_sproing,8,false);
        }
    }


//reduce jump height if player releases space
if keyboard_check_released(vk_space){
    if spv &lt; 0{
        spv += jumpTapAdjust;
        }
}

if jumping
    {
    sprite_index = playerJump;
    mask_index = playerJump;
    }
    

//starts the dash function
if key_shoot{
    if airMoves &gt;= 1{
        if canDash{
            dashTimer = totalDash;
        }
    }
}

if (dashTimer &gt; 0){
    dashTimer -= 1;
    sprite_index = playerLunge;
    mask_index = playerLungeMask;

    if canDash{
        if keyRight{
            sphH = dashSpeed;
            spvH = 0;
            justDashed = true;
            global.playerAttacking = true;
            canTurn = false;
            canDash = false;
        }
        else if keyUp{
            spvH = -dashSpeed;
            sphH = 0;
            justDashed = true;
            global.playerAttacking = true;
            canTurn = false;
            canDash = false;
        }
        else if keyLeft{
            sphH = -dashSpeed;
            spvH = 0;
            justDashed = true;
            global.playerAttacking = true;
            canTurn = false;
            canDash = false;
        }
        else if keyDown{
            spvH = dashSpeed;
            sphH = 0;
            justDashed = true;
            global.playerAttacking = true;
            canTurn = false;
            canDash = false;
        }
        else if (!keyLeft &amp;&amp; !keyRight &amp;&amp; !keyUp &amp;&amp; !keyDown){
        dashTimer = 0;
        justDashed = false;
        }
    }
    spv = spvH
    sph = sphH
}

if (spv = 0){
    vZero = 0;
}
else{
    vZero = 1;
}

if (sph = 0){
    hZero = 0;
}
else{
    hZero = 1;
}

if (dashTimer &lt;= 0){
    canTurn = true;
    canDash = true;
    canGrav = true;
    if jumping mask_index = playerJump
    else mask_index = playerStand
    global.playerAttacking = false;
    if justDashed{
        sph = sign(sph) * playerMaxSpeed * hZero;
        spv = sign(spv) * playerMaxSpeed * vZero;
        justDashed = false;
        airMoves -= 1;
        spvH = 0;
        sphH = 0;
    }
}
        
    
//collision with walls
    //v collision
if place_meeting(x,y+spv,par_wall)
    {
    while (!place_meeting(x,y+sign(spv),par_wall))
        {
        y+=sign(spv);
        }
    spv = 0;
    jumping = false;
    }
y += spv;

    
//horisontal collison
if place_meeting(x+sph,y,par_wall)
    {
    while (!place_meeting(x+sign(sph),y,par_wall))
        {
        x+=sign(sph);
        }
    sph = 0;
    jumping = false;
    }
//move the player for the the values of the x and y movement
x += sph;

if instance_exists(cameraBox)
    {
       cameraTargetX = cameraMoveWeight * (x+sph-cameraBox.x)
       cameraTargetY = cameraMoveWeight * (y+spv+cameraOffsetY-cameraBox.y)
       cameraBox.x += cameraTargetX
       cameraBox.y += cameraTargetY
    }

cameraMovement();


if global.invulTimer &gt;0{
    invulTimer -= 1;
    global.invul = true;
}
if global.invulTimer &lt;=0{
    global.invul = false;
}
/*
view_xview[0] += (((x + (image_xscale -100)) + view_wview[0]/2) - view_xview[0]) *0.09;
view_yview[0] += ((y- view_hview[0]/2) - view_yview[0]) *0.09;
*\
/*
if key_shoot
    {
    instance_create(x,y,obj_shot);
    }
*\
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>y</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>(room_height+20)</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>321</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_message</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>You Are Dead.  Watch out for Falls.</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.playerHealth</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="obj_Spring">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>inv</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>305</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_timeline_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>14</kind>
            <timeline>tm_Flash</timeline>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//global.playerHealth -= 1;
inv = true;
alarm[0] = 50;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="trainingTarget1">
      <action>
        <libid>1</libid>
        <id>612</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>-1</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_if_variable</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>inv</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>false</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>422</id>
        <kind>1</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>305</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_timeline_set</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>14</kind>
            <timeline>tm_Flash</timeline>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.playerHealth -= 1;
inv = true;
alarm[0] = 50;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>424</id>
        <kind>2</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="4" ename="par_laser">
      <action>
        <libid>1</libid>
        <id>321</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_message</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>You Are Dead.  Watch out for Lasers.</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>obj_player</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.playerHealth</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
